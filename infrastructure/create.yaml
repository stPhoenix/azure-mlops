# A pipeline with no CI trigger
trigger: none

pool:
  name: Default
  vmImage: 'ubuntu-latest'

parameters:
  - name: resourceGroupName
    type: string
    default: 'Experiments'
  - name: region
    type: string
    default: 'eastus'
  - name: subscriptionId
    type: string
  - name: storageAccountName
    type: string
    default: 'tfstateexperiments'
  - name: apiKey
    type: string
  - name: containerName
    type: string
    default: 'ml-tfstate'

stages:
- stage: Initial
  displayName: Create initial infrastructure
  jobs:
  - job: CreateRG
    displayName: Create resource group and storage account for terraform state
    variables:
      env.name: ${{ parameters.resourceGroupName }}
      region: ${{ parameters.region }}
      subscriptionId: ${{ parameters.subscriptionId }}
      storageAccountName: ${{ parameters.storageAccountName }}
      containerName: ${{ parameters.containerName }}
    steps:
      - task: AzureCLI@2
        displayName: "Run custom bash script"
        inputs:
          azureSubscription: ${{ parameters.subscriptionId }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'make create_rg'
  - job: CreateML
    dependsOn: CreateRG
    displayName: Create infrastructure for ML with terraform
    variables:
      env.name: ${{ parameters.resourceGroupName }}
      deploy.api.key: ${{ parameters.apiKey }}
      containerName: ${{ parameters.containerName }}
      subscriptionId: ${{ parameters.subscriptionId }}
    steps:
      - task: TerraformInstaller@1
        displayName: Install Terraform 1.5.7
        inputs:
          terraformVersion: 1.5.7
      - task: TerraformTaskV4@4
        displayName: "Init terraform"
        inputs:
          workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: ${{ parameters.subscriptionId }}
          backendAzureRmResourceGroupName: ${{ parameters.resourceGroupName }}
          backendAzureRmStorageAccountName: ${{ parameters.storageAccountName }}
          backendAzureRmContainerName: ${{ parameters.containerName }}
          backendAzureRmKey: 'terraform.tfstate'
      
      - task: TerraformTaskV4@4
        displayName: "Deploy ml infrastructure"
        inputs:
          workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure
          provider: 'azurerm'
          command: 'apply'
          backendServiceArm: ${{ parameters.subscriptionId }}
          backendAzureRmResourceGroupName: ${{ parameters.resourceGroupName }}
          backendAzureRmStorageAccountName: ${{ parameters.storageAccountName }}
          backendAzureRmContainerName: ${{ parameters.containerName }}
          environmentServiceNameAzureRM: ${{ parameters.subscriptionId }}
          backendAzureRmKey: 'terraform.tfstate'
          commandOptions: -var-file=variables/${{ parameters.resourceGroupName }}.tfvars -var="api-key=${{ parameters.apiKey }}" -auto-approve

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.8'
          architecture: 'x64'

      - task: AzureCLI@2
        displayName: "Register ml components"
        inputs:
          azureSubscription: ${{ parameters.subscriptionId }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'python3.8 -m pip install poetry && poetry install && make register_azure'